part2: main.o solver 
	gcc -o part2 main.o
main.o: main.c
	gcc -c main.c
solver: solver.c
	gcc solver.c -c
	gcc solver.o main.c -o solver -lm
clean:
	rm -f part2 solver


part2:
	gcc main.c -o part2 -lm
clean:
	rm -f part2


---------------------------------------
trace:
	gcc trace.c -o trace
fib:
	gcc fib.c -o fib
-----------------------------------------
part2: main.o solver 
	gcc -o part2 main.o
main.o: main.c header.h 
	gcc -c main.c 
solver: solver.c header.h
	gcc solver.c -c
	gcc solver.o main.c -o solver -lm
clean:
	rm -f part2 solver
------------------------------------------
part2: main.o solver 
	gcc -o part2 main.o
main.o: main.c header.h 
	gcc -c main.c
solver: solver.c header.h
	gcc solver.c -c
	gcc solver.o main.c -o solver -lm
clean:
	rm -f part2 solver






/*
   double f(int n, double *coefs, double x){
   int index = 0;
   double sum = 0;

   while(0<=n){

   sum+=coefs[index]*pow(x,n);
//	printf("POLY : %f.4\n",coefs[index]*pow(x,n));

n--;
index++;
}

return sum;

}

double solver(double A, double B, double e, int n, double *coefs){
double a =A;
double b = B;
double x = 0;

while(1){
x = (a+b)/2;

if( fabs(f(n,coefs,a)) < e){//f(n,coefs,a) 
return a;

} else if( fabs(f(n,coefs,b)) < e){
return b;

} else if( fabs(f(n,coefs,x)) < e){
return x;

} else {
if( f(n,coefs,a) * f(n,coefs,x)<0){
b=x;

} else {

if(f(n,coefs,x) * f(n,coefs,b)<0){
a=x;
}

}
}
}

printf("SOLVER IN F: %f\n",x);
